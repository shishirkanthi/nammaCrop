{"version":3,"sources":["Search.js","tabResultGrid.js","tabContent.js","results.js","App.js","index.js"],"names":["Search","state","crop","handleChange","event","target","value","setState","this","props","data","performSearch","Container","Row","Autocomplete","id","onChange","newValue","onSelect","options","sort","getOptionLabel","option","style","width","renderInput","params","TextField","label","variant","Component","withStyles","cell","padding","evenRow","table","issueTypeColHeader","classes","issueType","className","filter","item","Name","selectedName","map","index","key","Medicine","Dosage","DosageUnit","TabContent","console","log","selectedValue","items","IssueType","type","uniqueItemLabels","Set","inputValue","defaultValue","marginTop","textTransform","TabPanel","children","other","role","hidden","aria-labelledby","Box","Typography","a11yProps","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","Results","useTheme","useState","selectedPestName","setSelectedPestName","selectedDiseaseName","setSelectedDiseaseName","selectedWeedName","setSelectedWeedName","React","setValue","useEffect","resetState","setSelectedIssueName","val","AppBar","position","color","Tabs","indicatorColor","textColor","Tab","dir","direction","metaData","dataBase","cropdb","Insecticides","App","results","setResults","Crop","selectedCrop","toLowerCase","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.b81417dc.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport { Container, Row } from 'react-bootstrap'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass Search extends Component{\r\n    state ={\r\n        crop:''\r\n    }\r\n\r\n    handleChange = (event) =>{\r\n        const {crop, value} = event.target\r\n        this.setState({\r\n            crop:value\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        const crop = this.state.crop;\r\n        const {performSearch, data} = this.props;\r\n        \r\n        return(\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Autocomplete\r\n                            id=\"combo-box-demo\"\r\n                            onChange={(event, newValue)=>this.props.onSelect(event, newValue)}\r\n                            options={data.sort()}\r\n                            getOptionLabel={(option) => option}\r\n                            style={{ width: '96vw' }}\r\n                            renderInput={(params) => <TextField {...params} label=\"Crop\" variant=\"outlined\" />}\r\n                        />\r\n                    </Row>                    \r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search","import React,{Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core'\r\n\r\nconst styles = {\r\n    cell:{\r\n        width:'50%',\r\n        padding:'10px'\r\n    },\r\n    evenRow: {\r\n        'background-color': '#f2f2f2'\r\n    },\r\n    table:{\r\n        'width':'100%',\r\n        'text-align':'left'\r\n    }\r\n};\r\n\r\nfunction tabResultGrid(props){\r\n    const {classes} = props;\r\n    let issueTypeColHeader;\r\n    switch(props.issueType)\r\n    {\r\n        case 'pest': issueTypeColHeader = 'Pesticide';break;\r\n        case 'disease': issueTypeColHeader = 'Fungicide/Bactericide';break;\r\n        case 'weed': issueTypeColHeader = 'Weedicide';break;\r\n        default: issueTypeColHeader = 'Invalid data';break;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <table className={classes.table}>\r\n                <tr>\r\n                    <th className={classes.cell}>{issueTypeColHeader}</th>\r\n                    <th className={classes.cell}>Dosage</th>\r\n                </tr>\r\n                <tbody>\r\n                {props.data.filter((item)=>item.Name===props.selectedName).map((item, index)=>{\r\n                    return(\r\n                        <tr key={index} className={index%2===0?classes.evenRow:'oddRow'}>\r\n                            <td className={classes.cell}>{item.Medicine}</td>\r\n                            <td>{item.Dosage} {item.DosageUnit}</td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n                </tbody>\r\n            </table>            \r\n        </div>    \r\n    )\r\n}\r\n\r\ntabResultGrid.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(tabResultGrid)","import React,{Component, useEffect, useState} from 'react';\r\n// import SwipeableViews from 'react-swipeable-views';\r\nimport ReactDom from 'react-dom';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TabResultGrid from './tabResultGrid'\r\n\r\nexport default function TabContent(props){\r\n    console.log('tabContent.js > props.selectedValue: ', props.selectedValue);\r\n    const items = props.data.filter((item)=>item.IssueType==props.type);\r\n    const uniqueItemLabels = [...new Set(items.map((item)=>item.Name))];\r\n    \r\n    const nameSelected = (event, selectedValue) => {\r\n        console.log('Selected issue name: ', selectedValue);\r\n        props.onSelect(selectedValue, props.type);\r\n    }\r\n    // console.log('tabContent.js', props.selectedValue)\r\n    return (\r\n        <div>\r\n            {console.log('before autocomplete:', props.selectedValue)}\r\n            <Autocomplete                \r\n                id=\"combo-box-demo\"\r\n                onChange ={(event, newValue)=>nameSelected(event, newValue)}\r\n                options={uniqueItemLabels.sort()}\r\n                getOptionLabel={(uniqueItemLabels) => uniqueItemLabels}                    \r\n                inputValue={props.selectedValue}\r\n                defaultValue = {props.selectedValue}\r\n                style={{ width: '96vw', marginTop:'5%', textTransform: 'capitalize' }}                \r\n                renderInput={(params) => { return (<TextField {...params} label={props.type} variant=\"outlined\"/>)}}\r\n            />                \r\n            <TabResultGrid data={items} selectedName={props.selectedValue} issueType={props.type}/>\r\n        </div>\r\n    )    \r\n}","import React,{Component, useState, useEffect} from 'react';\r\n// import SwipeableViews from 'react-swipeable-views';\r\nimport ReactDom from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport TabContent from './tabContent';\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`full-width-tabpanel-${index}`}\r\n        aria-labelledby={`full-width-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  TabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n  };\r\n  \r\n  function a11yProps(index) {\r\n    return {\r\n      id: `full-width-tab-${index}`,\r\n      'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n  }\r\n  \r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      width: 500,\r\n      marginTop:'5%'\r\n    },\r\n  }));\r\n\r\n  export default function Results({...props}) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [selectedPestName, setSelectedPestName] = useState('');\r\n    const [selectedDiseaseName, setSelectedDiseaseName] = useState('');\r\n    const [selectedWeedName, setSelectedWeedName] = useState('');\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    useEffect(()=>{\r\n      resetState();\r\n    },[props.data]);\r\n\r\n    console.log('post use Effect: ', props);\r\n\r\n    const setSelectedIssueName = (val, issueType) => {\r\n      console.log('results.js> setSelectedIssueName: ', val, 'type: ', issueType);\r\n      switch(issueType){\r\n        case 'pest': setSelectedPestName(val);\r\n          break;\r\n        case 'disease': setSelectedDiseaseName(val);\r\n          break;\r\n        case 'weed': setSelectedWeedName(val);\r\n          break;\r\n        default: console.log('results.js > setSelectedIssueName:: ', 'Error in issue name selection');\r\n      }      \r\n    }\r\n\r\n    const resetState = () => {\r\n      setSelectedPestName('');\r\n      setSelectedDiseaseName('');\r\n      setSelectedWeedName('');      \r\n    }\r\n    \r\n    const handleChange = (event, newValue) => {\r\n      setValue(newValue);\r\n    };\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\" color=\"default\">\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n          >\r\n            <Tab label=\"Pests\" {...a11yProps(0)} />\r\n            <Tab label=\"Diseases\" {...a11yProps(1)} />\r\n            <Tab label=\"Weeds\" {...a11yProps(2)} />\r\n          </Tabs>\r\n        </AppBar>\r\n        {/* <SwipeableViews\r\n          axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n          index={value}\r\n          onChangeIndex={handleChangeIndex}\r\n        > */}\r\n          <TabPanel value={value} index={0} dir={theme.direction}>\r\n            <TabContent data={props.data} type='pest' selectedValue={selectedPestName} onSelect={setSelectedIssueName}/>\r\n          </TabPanel>\r\n          <TabPanel value={value} index={1} dir={theme.direction}>\r\n            <TabContent data={props.data} type='disease' selectedValue={selectedDiseaseName} onSelect={setSelectedIssueName}/>\r\n          </TabPanel>\r\n          <TabPanel value={value} index={2} dir={theme.direction}>\r\n            <TabContent data={props.data} type='weed' selectedValue={selectedWeedName} onSelect={setSelectedIssueName}/>\r\n          </TabPanel>\r\n        {/* </SwipeableViews> */}\r\n      </div>\r\n    );\r\n  }\r\n","import React,{Component, useState, useEffect} from 'react'\r\nimport Search from './Search'\r\nimport Results from './results'\r\nimport cropdb from './data/cropdb.json'\r\n\r\nconst metaData = {\r\n    appName:'Pestopedia'\r\n}\r\n\r\nconst dataBase = cropdb.Insecticides;\r\n\r\nconst App = () => {\r\n    const [selectedCrop, setSelectedCrop] = useState('');\r\n    const [results, setResults] = useState([]);\r\n\r\n    const updatedSelectedCrop = (event, selectedCrop) =>{\r\n        console.log('Selected crop:', selectedCrop);\r\n        if(selectedCrop !== null){\r\n            setResults(dataBase.filter(item=>{return item.Crop.toLowerCase()==selectedCrop.toLowerCase()}));\r\n        } else{\r\n            setResults([]);\r\n        }\r\n    }\r\n\r\n    const performSearch = (selectedCrop) =>{\r\n        console.log('Searching');\r\n        if(selectedCrop){\r\n            setResults(dataBase.filter(item=>{return item.Crop.toLowerCase()==selectedCrop.toLowerCase()}));\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <h1 className=\"center pageheading\" style={{background:'#00ff84'}}>{metaData.appName}</h1>\r\n            <div className=\"text-center\">\r\n                <Search  data={[...new Set(dataBase.map(item=>item.Crop))]} onSelect={updatedSelectedCrop} performSearch={performSearch}/>\r\n                <Results data={results}/>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDom from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDom.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}