{"version":3,"sources":["Search.js","tabResultGrid.js","tabContent.js","results.js","App.js","index.js"],"names":["Search","state","crop","handleChange","event","target","value","setState","this","props","data","performSearch","Container","Row","Autocomplete","id","onChange","newValue","onSelect","options","getOptionLabel","option","style","width","renderInput","params","TextField","label","variant","Component","withStyles","cell","padding","evenRow","table","issueTypeColHeader","classes","IssueType","className","filter","item","Name","selectedName","map","index","key","Medicine","Dosage","DosageUnit","TabContent","useState","setSelectedName","results","length","items","type","uniqueItemLabels","Set","console","log","nameSelected","marginTop","Crop","TabPanel","children","other","role","hidden","aria-labelledby","Box","Typography","a11yProps","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","Results","useTheme","React","setValue","AppBar","position","color","Tabs","indicatorColor","textColor","Tab","dir","direction","metaData","dataBase","cropdb","Insecticides","App","selectedCrop","toLowerCase","updatedSelectedCrop","ReactDom","render","document","getElementById"],"mappings":"6hjMAwCeA,E,4MAlCXC,MAAO,CACHC,KAAK,I,EAGTC,aAAe,SAACC,GAAU,IAAD,EACCA,EAAMC,OAAfC,GADQ,EACdJ,KADc,EACRI,OACb,EAAKC,SAAS,CACVL,KAAKI,K,uDAIJ,IAAD,UACSE,KAAKP,MAAMC,KACMM,KAAKC,OAAbC,GAFlB,EAEGC,cAFH,EAEkBD,MAEtB,OACI,6BACI,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,GAAG,iBACHC,SAAU,SAACZ,EAAOa,GAAR,OAAmB,EAAKR,MAAMS,SAASd,EAAOa,IACxDE,QAAST,EACTU,eAAgB,SAACC,GAAD,OAAYA,GAC5BC,MAAO,CAAEC,MAAO,QAChBC,YAAa,SAACC,GAAD,OAAY,kBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuBE,MAAM,OAAOC,QAAQ,wB,GA1B5EC,a,qFCkDNC,kBAnDA,CACXC,KAAK,CACDR,MAAM,MACNS,QAAQ,QAEZC,QAAS,CACL,mBAAoB,WAExBC,MAAM,CACF,MAAQ,OACR,aAAa,SAyCNJ,EArCf,SAAuBrB,GAAO,IAEtB0B,EADGC,EAAW3B,EAAX2B,QAEP,OAAO3B,EAAMC,KAAK,GAAG2B,WAEjB,IAAK,OAAQF,EAAqB,YAAY,MAC9C,IAAK,UAAWA,EAAqB,WAAW,MAChD,IAAK,OAAQA,EAAqB,YAAY,MAC9C,QAASA,EAAqB,eAGlC,OACI,6BACI,2BAAOG,UAAWF,EAAQF,OACtB,4BACI,wBAAII,UAAWF,EAAQL,MAAOI,GAC9B,wBAAIG,UAAWF,EAAQL,MAAvB,WAEJ,+BACCtB,EAAMC,KAAK6B,QAAO,SAACC,GAAD,OAAQA,EAAKC,OAAOhC,EAAMiC,gBAAcC,KAAI,SAACH,EAAMI,GAClE,OACI,wBAAIC,IAAKD,EAAON,UAAWM,EAAM,IAAI,EAAER,EAAQH,QAAQ,UACnD,wBAAIK,UAAWF,EAAQL,MAAOS,EAAKM,UACnC,4BAAKN,EAAKO,OAAV,IAAmBP,EAAKQ,sBClCrC,SAASC,EAAWxC,GAAO,IAAD,EACGyC,mBAAS,IADZ,mBAC9BR,EAD8B,KAChBS,EADgB,KAGrC,GAAG1C,EAAMC,KAAK0C,QAAQC,OAAS,EAAE,CAC7B,IAAMC,EAAQ7C,EAAMC,KAAK0C,QAAQb,QAAO,SAACC,GAAD,OAAQA,EAAKH,WAAW5B,EAAM8C,QAChEC,EAAgB,YAAO,IAAIC,IAAIH,EAAMX,KAAI,SAACH,GAAD,OAAQA,EAAKC,UAM5D,OACI,6BACI,kBAAC3B,EAAA,EAAD,CACIC,GAAG,iBACHC,SAAW,SAACZ,EAAOa,GAAR,OATF,SAACb,EAAOsC,GACzBgB,QAAQC,IAAI,wBAAyBjB,GACrCS,EAAgBT,GAOsBkB,CAAaxD,EAAOa,IAClDE,QAASqC,EACTpC,eAAgB,SAACoC,GAAD,OAAsBA,GACtClC,MAAO,CAAEC,MAAO,OAAQsC,UAAU,MAClCrC,YAAa,SAACC,GAAD,OAAY,kBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuBE,MAAOlB,EAAM8C,KAAM3B,QAAQ,iBAE/E,kBAAC,EAAD,CAAelB,KAAM4C,EAAOZ,aAAcA,KAG/C,MAAsB,KAAnBjC,EAAMC,KAAKoD,KACV,kDAEA,+BCtBf,SAASC,EAAStD,GAAQ,IACduD,EAAqCvD,EAArCuD,SAAU1D,EAA2BG,EAA3BH,MAAOsC,EAAoBnC,EAApBmC,MAAUqB,EADd,YACwBxD,EADxB,8BAGrB,OACE,uCACEyD,KAAK,WACLC,OAAQ7D,IAAUsC,EAClB7B,GAAE,8BAAyB6B,GAC3BwB,kBAAA,yBAAmCxB,IAC/BqB,GAEH3D,IAAUsC,GACT,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAaN,KAavB,SAASO,EAAU3B,GACjB,MAAO,CACL7B,GAAG,kBAAD,OAAoB6B,GACtB,gBAAgB,uBAAhB,OAAwCA,IAI5C,IAAM4B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,WAAWC,MAC1CxD,MAAO,IACPsC,UAAU,UAIC,SAASmB,EAAQvE,GAC9B,IAAM2B,EAAUoC,IACVE,EAAQO,cAFuB,EAGXC,IAAMhC,SAAS,GAHJ,mBAG9B5C,EAH8B,KAGvB6E,EAHuB,KAarC,OACE,yBAAK7C,UAAWF,EAAQuC,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC9B,kBAACC,EAAA,EAAD,CACEjF,MAAOA,EACPU,SAba,SAACZ,EAAOa,GAC3BkE,EAASlE,IAaHuE,eAAe,UACfC,UAAU,WAEV,kBAACC,EAAA,EAAD,eAAK/D,MAAM,SAAY4C,EAAU,KACjC,kBAACmB,EAAA,EAAD,eAAK/D,MAAM,YAAe4C,EAAU,KACpC,kBAACmB,EAAA,EAAD,eAAK/D,MAAM,SAAY4C,EAAU,OAQnC,kBAACR,EAAD,CAAUzD,MAAOA,EAAOsC,MAAO,EAAG+C,IAAKjB,EAAMkB,WAC3C,kBAAC3C,EAAD,CAAYvC,KAAMD,EAAMC,KAAM6C,KAAK,UAErC,kBAACQ,EAAD,CAAUzD,MAAOA,EAAOsC,MAAO,EAAG+C,IAAKjB,EAAMkB,YAG7C,kBAAC7B,EAAD,CAAUzD,MAAOA,EAAOsC,MAAO,EAAG+C,IAAKjB,EAAMkB,a,YCtFjDC,EACM,aAGNC,EAAWC,EAAOC,aA6CTC,E,4MA1CXhG,MAAQ,CACJiG,aAAa,GACb9C,QAAQ,I,EAIZzC,cAAgB,SAACuF,GACbxC,QAAQC,IAAI,aACTuC,GACC,EAAK3F,SAAS,CACV6C,QAAS0C,EAASvD,QAAO,SAAAC,GAAO,OAAOA,EAAKsB,KAAKqC,eAAeD,EAAaC,oB,EAKzFC,oBAAsB,SAAChG,EAAO8F,GAC1BxC,QAAQC,IAAI,iBAAkBuC,GACV,OAAjBA,EACC,EAAK3F,SAAS,CACV6C,QAAS0C,EAASvD,QAAO,SAAAC,GAAO,OAAOA,EAAKsB,KAAKqC,eAAeD,EAAaC,mBAGjF,EAAK5F,SAAS,CACV6C,QAAS,M,uDAMjB,OACI,6BACI,wBAAId,UAAU,qBAAqBhB,MAAO,CAACwD,WAAW,YAAae,GACnE,yBAAKvD,UAAU,eACX,kBAAC,EAAD,CAAS5B,KAAI,YAAM,IAAI+C,IAAIqC,EAASnD,KAAI,SAAAH,GAAI,OAAEA,EAAKsB,UAAS5C,SAAUV,KAAK4F,oBAAqBjG,aAAcK,KAAKL,aAAcQ,cAAeH,KAAKG,gBACrJ,kBAACqE,EAAD,CAAStE,KAAMF,KAAKP,c,GAnCtB4B,aCNlBwE,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.6a27d899.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport { Container, Row } from 'react-bootstrap'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass Search extends Component{\r\n    state ={\r\n        crop:''\r\n    }\r\n\r\n    handleChange = (event) =>{\r\n        const {crop, value} = event.target\r\n        this.setState({\r\n            crop:value\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        const crop = this.state.crop;\r\n        const {performSearch, data} = this.props;\r\n        \r\n        return(\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Autocomplete\r\n                            id=\"combo-box-demo\"\r\n                            onChange={(event, newValue)=>this.props.onSelect(event, newValue)}\r\n                            options={data}\r\n                            getOptionLabel={(option) => option}\r\n                            style={{ width: '96vw' }}\r\n                            renderInput={(params) => <TextField {...params} label=\"Crop\" variant=\"outlined\" />}\r\n                        />\r\n                    </Row>                    \r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search","import React,{Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core'\r\n\r\nconst styles = {\r\n    cell:{\r\n        width:'50%',\r\n        padding:'10px'\r\n    },\r\n    evenRow: {\r\n        'background-color': '#f2f2f2'\r\n    },\r\n    table:{\r\n        'width':'100%',\r\n        'text-align':'left'\r\n    }\r\n};\r\n\r\nfunction tabResultGrid(props){\r\n    const {classes} = props;\r\n    let issueTypeColHeader;\r\n    switch(props.data[0].IssueType)\r\n    {\r\n        case 'pest': issueTypeColHeader = 'Pesticide';break;\r\n        case 'disease': issueTypeColHeader = 'Medicine';break;\r\n        case 'weed': issueTypeColHeader = 'Weedicide';break;\r\n        default: issueTypeColHeader = 'Invalid data';break;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <table className={classes.table}>\r\n                <tr>\r\n                    <th className={classes.cell}>{issueTypeColHeader}</th>\r\n                    <th className={classes.cell}>Dosage</th>\r\n                </tr>\r\n                <tbody>\r\n                {props.data.filter((item)=>item.Name===props.selectedName).map((item, index)=>{\r\n                    return(\r\n                        <tr key={index} className={index%2===0?classes.evenRow:'oddRow'}>\r\n                            <td className={classes.cell}>{item.Medicine}</td>\r\n                            <td>{item.Dosage} {item.DosageUnit}</td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n                </tbody>\r\n            </table>            \r\n        </div>    \r\n    )\r\n}\r\n\r\ntabResultGrid.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(tabResultGrid)","import React,{Component, useState} from 'react';\r\n// import SwipeableViews from 'react-swipeable-views';\r\nimport ReactDom from 'react-dom';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TabResultGrid from './tabResultGrid'\r\n\r\nexport default function TabContent(props){\r\n    const [selectedName, setSelectedName] = useState('');\r\n\r\n    if(props.data.results.length > 0){\r\n        const items = props.data.results.filter((item)=>item.IssueType==props.type);\r\n        const uniqueItemLabels = [...new Set(items.map((item)=>item.Name))];\r\n        const nameSelected = (event, selectedName) => {\r\n            console.log('Selected issue name: ', selectedName);\r\n            setSelectedName(selectedName);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Autocomplete\r\n                    id=\"combo-box-demo\"\r\n                    onChange ={(event, newValue)=>nameSelected(event, newValue)}\r\n                    options={uniqueItemLabels}\r\n                    getOptionLabel={(uniqueItemLabels) => uniqueItemLabels}\r\n                    style={{ width: '96vw', marginTop:'5%' }}\r\n                    renderInput={(params) => <TextField {...params} label={props.type} variant=\"outlined\" />}\r\n                />\r\n                <TabResultGrid data={items} selectedName={selectedName}/>\r\n            </div>\r\n        )\r\n    } else if(props.data.Crop !=='') {        \r\n        return <label>No result found</label>\r\n    } else{\r\n        return <span></span>\r\n    }    \r\n}","import React,{Component} from 'react';\r\n// import SwipeableViews from 'react-swipeable-views';\r\nimport ReactDom from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport TabContent from './tabContent';\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`full-width-tabpanel-${index}`}\r\n        aria-labelledby={`full-width-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  TabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n  };\r\n  \r\n  function a11yProps(index) {\r\n    return {\r\n      id: `full-width-tab-${index}`,\r\n      'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n  }\r\n  \r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      width: 500,\r\n      marginTop:'5%'\r\n    },\r\n  }));\r\n  \r\n  export default function Results(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n  \r\n    const handleChange = (event, newValue) => {\r\n      setValue(newValue);\r\n    };\r\n  \r\n    const handleChangeIndex = (index) => {\r\n      setValue(index);\r\n    };\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\" color=\"default\">\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n          >\r\n            <Tab label=\"Pests\" {...a11yProps(0)} />\r\n            <Tab label=\"Diseases\" {...a11yProps(1)} />\r\n            <Tab label=\"Weeds\" {...a11yProps(2)} />\r\n          </Tabs>\r\n        </AppBar>\r\n        {/* <SwipeableViews\r\n          axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n          index={value}\r\n          onChangeIndex={handleChangeIndex}\r\n        > */}\r\n          <TabPanel value={value} index={0} dir={theme.direction}>\r\n            <TabContent data={props.data} type='pest'/>\r\n          </TabPanel>\r\n          <TabPanel value={value} index={1} dir={theme.direction}>\r\n            {/* <List data={props.data} type='disease'/> */}\r\n          </TabPanel>\r\n          <TabPanel value={value} index={2} dir={theme.direction}>\r\n            {/* <List data={props.data} type='weed'/> */}\r\n          </TabPanel>\r\n        {/* </SwipeableViews> */}\r\n      </div>\r\n    );\r\n  }\r\n","import React,{Component} from 'react'\r\nimport Search from './Search'\r\nimport Results from './results'\r\nimport cropdb from './data/cropdb.json'\r\n\r\nconst metaData = {\r\n    appName:'Pestopedia'\r\n}\r\n\r\nconst dataBase = cropdb.Insecticides;\r\n\r\nclass App extends Component{\r\n    state = {\r\n        selectedCrop:'',\r\n        results:[]\r\n    }\r\n\r\n\r\n    performSearch = (selectedCrop) =>{\r\n        console.log('Searching');\r\n        if(selectedCrop){\r\n            this.setState({\r\n                results: dataBase.filter(item=>{return item.Crop.toLowerCase()==selectedCrop.toLowerCase()})\r\n            });\r\n        }\r\n    }\r\n\r\n    updatedSelectedCrop = (event, selectedCrop) =>{\r\n        console.log('Selected crop:', selectedCrop);\r\n        if(selectedCrop !== null){\r\n            this.setState({\r\n                results: dataBase.filter(item=>{return item.Crop.toLowerCase()==selectedCrop.toLowerCase()})\r\n            });\r\n        } else{\r\n            this.setState({\r\n                results: []\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){        \r\n        return(\r\n            <div>\r\n                <h1 className=\"center pageheading\" style={{background:'#00ff84'}}>{metaData.appName}</h1>\r\n                <div className=\"text-center\">\r\n                    <Search  data={[...new Set(dataBase.map(item=>item.Crop))]} onSelect={this.updatedSelectedCrop} handleChange={this.handleChange} performSearch={this.performSearch}/>\r\n                    <Results data={this.state}/>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDom from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDom.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}